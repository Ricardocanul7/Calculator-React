{"version":3,"sources":["components/ui/Display.jsx","components/ui/Key.jsx","components/ui/Keyboard.jsx","screens/CalculatorScreen.jsx","App.js","serviceWorker.js","index.js"],"names":["Display","values","className","type","value","readOnly","Key","text","onPressed","onClick","Keyboard","handleKeyPressed","CalculatorScreen","initNumber","accumulator","currentValue","initOperator","prev","current","useState","number","setNumber","operator","setOperator","on","setOn","Number","String","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f20769bd.chunk.js","sourcesContent":["import React from 'react'\nimport './Display.scss';\n\nexport const Display = ({values}) => {\n    return (\n        <div className=\"display-container\">\n            <input type=\"text\" value={values} readOnly/>\n        </div>\n    )\n}\n","import React from 'react'\nimport './Key.scss';\n\nexport const Key = ({text, onPressed}) => {\n\n    return (\n        <div>\n            <button \n                className=\"btn-container\"\n                onClick={() => onPressed(text)}\n            >\n                <p>{text}</p>\n            </button>\n        </div>\n    )\n}\n","import React from 'react'\nimport {Key} from './Key';\nimport './Keyboard.scss';\n\nexport const Keyboard = ({handleKeyPressed}) => {\n    return (\n        <div className=\"keyboard-container\">\n            <div className=\"keyboard-grid\">\n                <div className=\"row\">\n                    <Key text=\"OFF\" onPressed={handleKeyPressed}/>\n                    <Key text=\"AC\" onPressed={handleKeyPressed}/>\n                    <Key text=\"DEL\" onPressed={handleKeyPressed}/>\n                    <Key text=\"/\" onPressed={handleKeyPressed}/>\n                </div>\n                <div className=\"row\">\n                    <Key text=\"7\" onPressed={handleKeyPressed}/>\n                    <Key text=\"8\" onPressed={handleKeyPressed}/>\n                    <Key text=\"9\" onPressed={handleKeyPressed}/>\n                    <Key text=\"X\" onPressed={handleKeyPressed}/>\n                </div>\n                <div className=\"row\">\n                    <Key text=\"4\" onPressed={handleKeyPressed}/>\n                    <Key text=\"5\" onPressed={handleKeyPressed}/>\n                    <Key text=\"6\" onPressed={handleKeyPressed}/>\n                    <Key text=\"-\" onPressed={handleKeyPressed}/>\n                </div>\n                <div className=\"row\">\n                    <Key text=\"1\" onPressed={handleKeyPressed}/>\n                    <Key text=\"2\" onPressed={handleKeyPressed}/>\n                    <Key text=\"3\" onPressed={handleKeyPressed}/>\n                    <Key text=\"+\" onPressed={handleKeyPressed}/>\n                </div>\n                <div className=\"row\">\n                    <Key text=\"ON\" onPressed={handleKeyPressed}/>\n                    <Key text=\"0\" onPressed={handleKeyPressed}/>\n                    <Key text=\".\" onPressed={handleKeyPressed}/>\n                    <Key text=\"=\" onPressed={handleKeyPressed}/>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useState } from 'react'\nimport { Display } from '../components/ui/Display'\nimport { Keyboard } from '../components/ui/Keyboard'\nimport './CalculatorScreen.scss'\n\nexport const CalculatorScreen = () => {\n\n    const initNumber = {\n        accumulator : 0,\n        currentValue : 0\n    };\n\n    const initOperator = {\n        prev : null,\n        current : null\n    };\n\n    const [number, setNumber] = useState(initNumber);\n    const [operator, setOperator] = useState(initOperator);\n    const [on, setOn] = useState(true);\n\n    const handleKeyPressed = (value) => {\n        switch(value)\n        {\n            case 'ON':\n                setOn(true);\n                setNumber(initNumber);\n                setOperator(initOperator);\n                break;\n            case 'OFF':\n                setOn(false);\n                setNumber({\n                    ...number,\n                    currentValue : ''\n                });\n                setOperator(initOperator);\n                break;\n            case 'AC':\n                setNumber(initNumber);\n                setOperator(initOperator);\n                break;\n            case 'DEL':\n                setNumber({\n                    ...number,\n                    currentValue : 0,\n                });\n                break;\n            case '+' : \n                if(operator.current === null){\n                    if(number.currentValue !== 0 && on === true){\n                        setNumber({\n                            accumulator : (Number(number.accumulator) + Number(number.currentValue)),\n                            currentValue : 0\n                        })\n                        setOperator({\n                            prev: null,\n                            current : '+'\n                        });\n                    }\n                }else{\n                    setOperator({\n                        prev: null,\n                        current : '+'\n                    });\n                }\n\n                break;\n            case '-' : \n                if(operator.current === null){\n                    if(number.currentValue !== 0 && on === true){\n                        setNumber({\n                            accumulator : (Number(number.accumulator) + Number(number.currentValue)),\n                            currentValue : 0\n                        })\n                        setOperator({\n                            prev: null,\n                            current : '-'\n                        });\n                    }\n                }else{\n                    setOperator({\n                        prev: null,\n                        current : '-'\n                    });\n                }\n\n                break;\n            case '/' : \n                if(operator.current === null){\n                    if(number.currentValue !== 0 && on === true){\n                        setNumber({\n                            accumulator : (Number(number.accumulator) + Number(number.currentValue)),\n                            currentValue : 0\n                        })\n                        setOperator({\n                            prev: null,\n                            current : '/'\n                        });\n                    }\n                }else{\n                    setOperator({\n                        prev: null,\n                        current : '/'\n                    });\n                }\n\n                break;\n            case 'X' : \n                if(operator.current === null){\n                    if(number.currentValue !== 0 && on === true){\n                        setNumber({\n                            accumulator : (Number(number.accumulator) + Number(number.currentValue)),\n                            currentValue : 0\n                        })\n                        setOperator({\n                            prev: null,\n                            current : '*'\n                        });\n                    }\n                }else{\n                    setOperator({\n                        prev: null,\n                        current : '*'\n                    });\n                }\n\n                break;\n            case '=' : \n                if(operator.current === '+' && on === true){\n                    setNumber({\n                        accumulator : 0,\n                        currentValue : (Number(number.accumulator) + Number(number.currentValue)),\n                    });\n                    setOperator({\n                        prev : '+',\n                        current : null\n                    })\n                }\n                if(operator.current === '-' && on === true){\n                    setNumber({\n                        accumulator : 0,\n                        currentValue : (Number(number.accumulator) - Number(number.currentValue)),\n                    });\n                    setOperator({\n                        prev : '-',\n                        current : null\n                    })\n                }\n                if(operator.current === '/' && on === true){\n                    setNumber({\n                        accumulator : 0,\n                        currentValue : (Number(number.accumulator) / Number(number.currentValue)),\n                    });\n                    setOperator({\n                        prev : '/',\n                        current : null\n                    })\n                }\n                if(operator.current === '*' && on === true){\n                    setNumber({\n                        accumulator : 0,\n                        currentValue : (Number(number.accumulator) * Number(number.currentValue)),\n                    });\n                    setOperator({\n                        prev : '*',\n                        current : null\n                    })\n                }\n                break;\n            default :\n                if(on === true)\n                {\n                    if(number.currentValue === 0){\n                        setNumber({\n                            ...number,\n                            currentValue : value\n                        });\n                    }else{\n                        setNumber({\n                            ...number,\n                            currentValue : (String(number.currentValue) + String(value))\n                        });\n                    }\n                }\n                break;\n        }\n    }\n\n    return (\n        <div className=\"cal-app\">\n            <h1 className=\"title\">Calculator App</h1>\n            <div className=\"cal-section\">\n                <div className=\"calculator-area\">\n                    <Display values={number.currentValue}/>\n                    <Keyboard handleKeyPressed={handleKeyPressed}/>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport './App.scss';\nimport { CalculatorScreen } from './screens/CalculatorScreen';\n\nfunction App() {\n  return (\n    <>\n      <CalculatorScreen />\n      <footer>\n        Ricardo Canul\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}